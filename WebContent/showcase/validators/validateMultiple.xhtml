<ui:composition template="/WEB-INF/templates/showcase.xhtml"
	xmlns="http://www.w3.org/1999/xhtml"
	xmlns:f="http://java.sun.com/jsf/core"
	xmlns:h="http://java.sun.com/jsf/html"
	xmlns:ui="http://java.sun.com/jsf/facelets"
	xmlns:o="http://omnifaces.org/ui"
>
	<ui:define name="description">
		<p>
			The <code>&lt;o:validateMultiple&gt;</code> allows the developer to validate multiple fields by either a custom validator
			method:
		</p>
		<pre class="prettyprint"><code class="code-xhtml">
&lt;o:validateMultiple id="myId" components="foo bar baz" validator="\#{bean.someMethod}" /&gt;
&lt;h:message for="myId" /&gt;
&lt;h:inputText id="foo" /&gt;
&lt;h:inputText id="bar" /&gt;
&lt;h:inputText id="baz" /&gt;
		</code></pre>
		<p>
			whereby the method has the following signature (method name is free to your choice):
		</p>
		<pre class="prettyprint"><code class="code-java">
public boolean someMethod(FacesContext context, List&lt;UIInput&gt; components, List&lt;Object&gt; values) {
    // ...
}
		</code></pre>
		<p>
			Or, by a managed bean instance which implements the <code>MultiFieldValidator</code> interface:
		</p>
		<pre class="prettyprint"><code class="code-xhtml">
&lt;o:validateMultiple id="myId" components="foo bar baz" validator="\#{validateValuesBean}" /&gt;
&lt;h:message for="myId" /&gt;
&lt;h:inputText id="foo" /&gt;
&lt;h:inputText id="bar" /&gt;
&lt;h:inputText id="baz" /&gt;
		</code></pre>
		<pre class="prettyprint"><code class="code-java">
@ManagedBean
@RequestScoped
public class ValidateValuesBean implements MultiFieldValidator {

    @Override
    public boolean validateValues(FacesContext context, List&lt;UIInput&gt; components, List&lt;Object&gt; values) {
        // ...
    }

}
		</code></pre>
		<p>
			Note: this validator does NOT throw <code>ValidatorException</code>, but returns a boolean!
			Message handling and invalidation job is up to the <code>ValidateMultipleFields</code> implementation who will call this method.
			You can customize the message by the <code>message</code> attribute of the tag.
		</p>
	</ui:define>

	<ui:define name="demo">
		<h:form>
			<h3>Please enter "one", "two" and "three" respectively.</h3>
			<o:validateMultiple id="validateMultiple" components="foo bar baz" validator="#{validateMultipleImpl}" 
				message="You should enter 'one', 'two' and 'three' respectively." />

			<h:panelGrid columns="3">
				<o:outputLabel for="foo" value="Foo" />
				<h:inputText id="foo" />
				<h:message for="foo" />

				<o:outputLabel for="bar" value="Bar" />
				<h:inputText id="bar" />
				<h:message for="bar" />

				<o:outputLabel for="baz" value="Baz" />
				<h:inputText id="baz" />
				<h:message for="baz" />

				<h:panelGroup />
				<h:commandButton value="submit">
					<f:ajax execute="@form" render="@form" />
				</h:commandButton>
				<h:panelGroup>
					<h:message for="validateMultiple" />
					<h:outputText value="OK!" rendered="#{facesContext.postback and not facesContext.validationFailed}" />
				</h:panelGroup>
			</h:panelGrid>
		</h:form>
	</ui:define>
</ui:composition>