<ui:composition template="/WEB-INF/templates/showcase.xhtml"
	xmlns="http://www.w3.org/1999/xhtml"
	xmlns:f="http://java.sun.com/jsf/core"
	xmlns:h="http://java.sun.com/jsf/html"
	xmlns:ui="http://java.sun.com/jsf/facelets"
	xmlns:o="http://omnifaces.org/ui"
>
	<ui:define name="description">
		<p>
			By default, JSF converters run on every request, regardless of whether the submitted value has changed or not.
			In case of complex objects which are already stored in the model in a broader scope, such as the view scope, this may result in unnecessarily expensive service/DAO calls.
			In such case, you'd like to perform the expensive service/DAO call only when the submitted value is really changed as compared to the model value.
		</p>
		<p>
			This converter offers you a template to do it transparently. To use it, just change your converters from:
		</p>
		<pre class="prettyprint"><code class="code-java">
public class YourConverter implements Converter {

    public Object getAsObject(FacesContext context, UIComponent component, String submittedValue) {
        // ...
    }

    // ...
}
		</code></pre>
		<p>
			to
		</p>
		<pre class="prettyprint"><code class="code-java">
public class YourConverter extends ValueChangeConverter {

    public Object getAsChangedObject(FacesContext context, UIComponent component, String submittedValue) {
        // ...
    }

    // ...
}
		</code></pre>
		<p>
			So, essentially, just replace <code>implements Converter</code> by <code>extends ValueChangeConverter</code> 
			and rename the method from <code>getAsObject</code> to <code>getAsChangedObject</code>.
			Note: the <code>getAsString</code> method of your converter doesn't need to be chnaged.
		</p>
	</ui:define>
</ui:composition>