<ui:composition template="/WEB-INF/templates/showcase.xhtml"
	xmlns="http://www.w3.org/1999/xhtml"
	xmlns:f="http://java.sun.com/jsf/core"
	xmlns:h="http://java.sun.com/jsf/html"
	xmlns:ui="http://java.sun.com/jsf/facelets"
	xmlns:o="http://omnifaces.org/ui"
	xmlns:demo="http://omnifaces.org/showcase"
>
	<ui:define name="description">
		<p>
			<code>&lt;o:viewParamValidationFailed&gt;</code> allows the developer to handle a view parameter validation failure
			with either a redirect or a HTTP error status, optionally with respectively a flash message or HTTP error message.
			This tag can be placed inside <code>&lt;f:metadata&gt;</code> or <code>&lt;f|o:viewParam&gt;</code>. When placed in
			<code>&lt;f|o:viewParam&gt;</code>, then it will be applied when the particular view parameter has a validation
			error as per <code>UIViewParameter#isValid()</code>. When placed in <code>&lt;f:metadata&gt;</code>, and no one view
			parameter has already handled the validation error via its own  <code>&lt;o:viewParamValidationFailed&gt;</code>,
			then it will be applied when there's a general validation error as per <code>FacesContext#isValidationFailed()</code>.
		</p>
		<p>
			The <code>sendRedirect</code> attribute uses under the covers
			<a href="http://omnifaces.org/docs/javadoc/current/org/omnifaces/util/Faces.html#redirect(java.lang.String, java.lang.String...)"><code>Faces#redirect(String, String...)</code></a> to send the
			redirect, so the same rules as to scheme and leading slash apply here.
			The <code>sendError</code> attribute uses under the covers <code>Faces#responseSendError(int, String)</code> to send the
			error, so you can customize HTTP error pages via <code>&lt;error-page&gt;</code> entries in <code>web.xml</code>,
			otherwise the server-default one will be displayed instead.
		</p>
		<h3>Examples</h3>
		<p>
			With the example below, when at least one view param is absent, then the client will be returned a HTTP 400 error.
		</p>
		<pre class="prettyprint"><code class="xhtml">
&lt;f:metadata&gt;
    &lt;f:viewParam name="foo" required="true" /&gt;
    &lt;f:viewParam name="bar" required="true" /&gt;
    &lt;o:viewParamValidationFailed sendError="400" /&gt;
&lt;/f:metadata&gt;
		</code></pre>
		<p>
			With the example below, only when the "foo" parameter is absent, then the client will be redirected to "login.xhtml".
			When the "bar" parameter is absent, nothing new will happen. The process will proceed "as usual". I.e. the validation
			error will end up as a faces message in the current view the usual way.
		</p>
		<pre class="prettyprint"><code class="xhtml">
&lt;f:metadata&gt;
    &lt;f:viewParam name="foo" required="true"&gt;
        &lt;o:viewParamValidationFailed sendRedirect="login.xhtml" /&gt;
    &lt;/f:viewParam&gt;
    &lt;f:viewParam name="bar" required="true" /&gt;
&lt;/f:metadata&gt;
		</code></pre>
		<p>
			With the example below, only when the "foo" parameter is absent, regardless of the "bar" or "baz" parameters, then
			the client will be returned a HTTP 401 error. When the "foo" parameter is present, but either "bar" or "baz"
			parameter is absent, then the client will be redirected to "search.xhtml".
		</p>
		<pre class="prettyprint"><code class="xhtml">
&lt;f:metadata&gt;
    &lt;f:viewParam name="foo" required="true"&gt;
        &lt;o:viewParamValidationFailed sendError="401" /&gt;
    &lt;/f:viewParam&gt;
    &lt;f:viewParam name="bar" required="true" /&gt;
    &lt;f:viewParam name="baz" required="true" /&gt;
    &lt;o:viewParamValidationFailed sendRedirect="search.xhtml" /&gt;
&lt;/f:metadata&gt;
		</code></pre>
		<p>
			In a nutshell: the one nested in <code>&lt;f:viewParam&gt;</code> takes precedence over the one nested in
			<code>&lt;f:metadata&gt;</code>. Also, when there are multiple <code>&lt;f:viewParam&gt;</code> tags with a
			<code>&lt;o:viewParamValidationFailed&gt;</code>, then they will be applied in the same order as they are declared
			in the view.
		</p>
		<h3>Messaging</h3>
		<p>
			By default, the first occurring validation message on the parent component will be copied, or when there is none,
			then the first occurring global message will be copied. When <code>sendRedirect</code> is used, then it will be set
			as a global flash error message. When <code>sendError</code> is used, then it will be set as HTTP status message.
		</p>
		<p>
			You can override this message by explicitly specifying the <code>message</code> attribute. This is applicable on
			both <code>sendRedirect</code> and <code>sendError</code>.
		</p>
		<pre class="prettyprint"><code class="xhtml">
&lt;o:viewParamValidationFailed sendRedirect="search.xhtml" message="You need to perform a search." /&gt;
...
&lt;o:viewParamValidationFailed sendError="401" message="Authentication failed. You need to login." /&gt;
		</code></pre>

		<h3>Design notes</h3>
		<p>
			You can technically nest multiple <code>&lt;o:viewParamValidationFailed&gt;</code> inside the same parent, but this
			is not the documented approach and the behavior is unspecified.
		</p>
		<p>
			You can <strong>not</strong> change the HTTP status code of a redirect. This is not a JSF limitation, but a HTTP
			limitation. The status code of a redirect will <strong>always</strong> be the one of the response of the redirect.
			If you intend to "redirect" with a different HTTP status code, then you should be using <code>sendError</code>
			instead and specify the desired page as <code>&lt;error-page&gt;</code> in <code>web.xml</code>.
		</p>
	</ui:define>

	<ui:define name="demo-meta">
		<f:metadata>
			<f:viewParam id="foo" name="foo" converter="javax.faces.Long">
				<o:viewParamValidationFailed sendError="400" />
			</f:viewParam>
			<f:viewParam id="bar" name="bar" converter="javax.faces.Long">
				<o:viewParamValidationFailed sendError="400" message="Invalid bar!"/>
			</f:viewParam>
			<f:viewParam id="baz" name="baz" converter="javax.faces.Long">
				<o:viewParamValidationFailed sendRedirect="whatsnew" />
			</f:viewParam>
			<f:viewParam id="faz" name="faz" converter="javax.faces.Long">
				<o:viewParamValidationFailed sendRedirect="whatsnew" message="Invalid faz!" />
			</f:viewParam>
			<f:viewParam id="boo" name="boo" converter="javax.faces.Long" />
			<f:viewParam id="foz" binding="#{foz}" name="foz" converter="javax.faces.Long" />
			<o:viewParamValidationFailed sendError="400" message="#{foz.valid ? null : 'Invalid foz!'}" />
		</f:metadata>
	</ui:define>

	<ui:define name="demo">
		<p>
			This page has 6 view parameters: <code>foo</code>,<code>bar</code>, <code>baz</code>, <code>faz</code>, 
			<code>boo</code> and <code>foz</code>. All with a <code>javax.faces.Long</code> converter, just for simplicity.
			You can of course use your own converters and validators, e.g. <code>required="true"</code>, 
			<code>&lt;f:validateLongRange&gt;</code>, etcetera. In case conversion (or validation) fails, the associated
			<code>&lt;o:viewParamValidationFailed&gt;</code> logic will be executed.
		</p>
		<p>
			The first four view parameters have each their own <code>&lt;o:viewParamValidationFailed&gt;</code>, 
			demonstrating the following cases:
		</p>
		<ul>
			<li><a href="?foo=abc">Sending a HTTP 400 error with default validation message.</a></li>
			<li><a href="?bar=abc">Sending a HTTP 400 error with a custom message.</a></li>
			<li><a href="?baz=abc">Sending a redirect to <code>/whatsnew</code> with default validation message.</a></li>
			<li><a href="?faz=abc">Sending a redirect to <code>/whatsnew</code> with a custom message.</a></li>
		</ul>
		<p>
			The latter two view parameters which doesn't have their own <code>&lt;o:viewParamValidationFailed&gt;</code>
			and are both making use of the global one sending a 400. The message is conditionally set based on whether it
			was the <code>foz</code> parameter which failed.
		</p>
		<ul>
			<li><a href="?boo=abc">Send a HTTP 400 error with default validation message.</a></li>
			<li><a href="?foz=abc">Send a HTTP 400 error with a custom message.</a></li>
		</ul>
	</ui:define>
</ui:composition>