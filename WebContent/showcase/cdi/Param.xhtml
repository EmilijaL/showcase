<ui:composition template="/WEB-INF/templates/showcase.xhtml"
	xmlns="http://www.w3.org/1999/xhtml"
	xmlns:f="http://java.sun.com/jsf/core"
	xmlns:h="http://java.sun.com/jsf/html"
	xmlns:ui="http://java.sun.com/jsf/facelets"
	xmlns:o="http://omnifaces.org/ui"
	xmlns:of="http://omnifaces.org/functions"
>
	<ui:define name="description">
		<p>
			The CDI annotation <code>@Param</code> allows you to inject, convert and validate a HTTP request parameter
			in a CDI managed bean. It's basically like <code>&lt;f:viewParam&gt;</code>, but then with the major difference
			that the injected HTTP request parameter is available during <code>@PostConstruct</code>, allowing a much easier
			way of processing without the need for a <code>&lt;f:event type="preRenderView"&gt;</code>. 
		</p>
	</ui:define>

	<ui:define name="demo">
		<p>
			Click those links.
		</p>
		<ul>
			<li>The parameter "text1" is injected as <code>String</code> and is validated as JSF <code>required="true"</code></li>
			<li>The parameter "text2" is injected as <code>String</code> and is validated as JSF <code>&lt;f:validateLength minimum="3"&gt;</code></li>
			<li>The parameter "text3" is injected as <code>String</code> and is validated as JSR303 <code>@NotNull</code></li>
			<li>The parameter "number" is injected as <code>Integer</code> with automatic JSF integer conversion</li>
			<li>The parameter "date" is injected as <code>Date</code> and is converted as JSF <code>&lt;f:convertDateTime pattern="yyyyMMdd"&gt;</code></li>
		</ul>
		<ul>
			<li>
				<h:link value="Set all params">
					<f:param name="text1" value="foo" />
					<f:param name="text2" value="bar" />
					<f:param name="text3" value="baz" />
					<f:param name="number" value="42" />
					<f:param name="date" value="19780326" />
				</h:link>
			</li>
			<li>
				<h:link value="Omit required param and set wrong values on others">
					<f:param name="text2" value="x" />
					<f:param name="number" value="NaN" />
					<f:param name="date" value="26 Mar 1978" />
				</h:link>
			</li>
		</ul>
		<p>Result: #{cdiParamBean.result}</p>
		<h:messages styleClass="messages" errorClass="error" />
	</ui:define>
</ui:composition>