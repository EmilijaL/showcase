<ui:composition template="/WEB-INF/templates/showcase.xhtml"
	xmlns="http://www.w3.org/1999/xhtml"
	xmlns:f="http://java.sun.com/jsf/core"
	xmlns:h="http://java.sun.com/jsf/html"
	xmlns:ui="http://java.sun.com/jsf/facelets"
	xmlns:o="http://omnifaces.org/ui"
	xmlns:of="http://omnifaces.org/functions"
>
	<ui:define name="description">
		<p>
			The CDI view scope annotation, intented for use in JSF 2.0/2.1.
			Just use it the usual way as all other CDI scopes.
			Watch out with IDE autocomplete on import that you don't accidentally import JSF's own one.
		</p>
		<pre class="prettyprint"><code class="lang-java">
import javax.inject.Named;
import org.omnifaces.cdi.ViewScoped;

@Named
@ViewScoped
public class OmniCDIViewScopedBean implements Serializable {}
		</code></pre>
		<p>
			In JSF 2.2, you're supposed to use JSF's own new CDI compatible <code>javax.faces.view.ViewScoped</code> instead;
			not because this CDI view scope annotation is so bad, in contrary, but just because using the standard solutions should be preferred over alternative solutions.
		</p>
		<p>
			Under the covers, CDI managed beans with this scope are via <code>ViewScopeManager</code> stored in the session scope by an <code>UUID</code> based key which is referenced in JSF's own view map as available by <code>UIViewRoot#getViewMap()</code>.
			They are not stored in the JSF view map itself as that would be rather expensive in case of client side state saving.
		</p>
		<p>
			In effects, this CDI view scope annotation has exactly the same lifecycle as JSF's own view scope. 
			One important thing to know and understand is that any <code>PreDestroy</code> annotated method on a CDI view scoped bean isn't <em>immediately</em> invoked in all cases when the view scope ends.
			This is not specific to CDI, but to JSF itself.
			For detail, see the following JSF issues related to the matter:
		</p>
		<ul>
			<li><a href="https://java.net/jira/browse/JAVASERVERFACES-1351">Mojarra issue 1351</a></li>
			<li><a href="https://java.net/jira/browse/JAVASERVERFACES-1839">Mojarra issue 1839</a></li>
			<li><a href="https://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-905">JSF spec issue 905</a></li>
		</ul>
		<p>
			Summarized, it's only invoked when the view is either explicitly changed by a non-null/void navigation on a postback,
			or when the view is explicitly rebuilt by <code>FacesContext#setViewRoot(UIViewRoot)}</code>. 
			This CDI view scope annotation however guarantees that the <code>PreDestroy</code> annotated method is also invoked on session expire,
			while JSF 2.0/2.1 doesn't do that (JSF 2.2 does).
		</p>
	</ui:define>

	<ui:define name="demo">
		<h3>CDI view scoped bean</h3>
		<h:form id="cdiViewScopedForm">
			<p>Status:</p>
			<ul>
				<li>It's now: #{now}</li>
				<li>Session ID: #{session.id}</li>
				<li>CDI view scoped bean: #{cdiViewScopedBean}</li>
			</ul>
			<p>
				<h:commandButton value="submit form without ajax" action="#{cdiViewScopedBean.submit}" />
				<h:commandButton value="submit form with ajax" action="#{cdiViewScopedBean.submit}">
					<f:ajax execute="@form" render="@form" />
				</h:commandButton>
				<h:commandButton value="rebuild view" action="#{cdiViewScopedBean.rebuildView}">
					<f:ajax execute="@form" render="@form" />
				</h:commandButton>
				<h:commandButton value="navigate on POST" action="#{cdiViewScopedBean.navigate}">
					<f:ajax execute="@form" render="@form" />
				</h:commandButton>
				<h:button value="refresh page" />
			</p>
			<p>Messages from CDI view scoped bean:</p>
			<h:messages for="cdiViewScopedForm" />
		</h:form>

		<hr />

		<h3>JSF view scoped bean</h3>
		<h:form id="jsfViewScopedForm">
			<p>Status:</p>
			<ul>
				<li>It's now: #{now}</li>
				<li>Session ID: #{session.id}</li>
				<li>JSF view scoped bean: #{jsfViewScopedBean}</li>
			</ul>
			<p>
				<h:commandButton value="submit form without ajax" action="#{jsfViewScopedBean.submit}" />
				<h:commandButton value="submit form with ajax" action="#{jsfViewScopedBean.submit}">
					<f:ajax execute="@form" render="@form" />
				</h:commandButton>
				<h:commandButton value="rebuild view" action="#{jsfViewScopedBean.rebuildView}">
					<f:ajax execute="@form" render="@form" />
				</h:commandButton>
				<h:commandButton value="navigate on POST" action="#{jsfViewScopedBean.navigate}">
					<f:ajax execute="@form" render="@form" />
				</h:commandButton>
				<h:button value="refresh page" />
			</p>
			<p>Messages from JSF view scoped bean:</p>
			<h:messages for="jsfViewScopedForm" />
		</h:form>
	</ui:define>
</ui:composition>