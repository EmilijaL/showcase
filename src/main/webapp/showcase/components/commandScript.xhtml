<ui:composition template="/WEB-INF/templates/showcase.xhtml"
	xmlns="http://www.w3.org/1999/xhtml"
	xmlns:f="http://xmlns.jcp.org/jsf/core"
	xmlns:h="http://xmlns.jcp.org/jsf/html"
	xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
	xmlns:o="http://omnifaces.org/ui"
	xmlns:of="http://omnifaces.org/functions"
>
	<ui:define name="meta">
		<f:metadata>
			<f:attribute name="api.path" value="component/script/CommandScript" />
			<f:attribute name="vdl.paths" value="o/commandScript" />
			<f:attribute name="src.paths" value="classes/org/omnifaces/showcase/components/CommandScriptBean.java" />
		</f:metadata>
	</ui:define>

	<ui:define name="demo">
		<h3>Pass hash fragment change to JSF</h3>
		<p>
			<a href="#foo">#foo</a> <a href="#bar">#bar</a> <a href="#baz">#baz</a> 
			(you can even specify your own in browser address bar!)
		</p> 
		<p>
			Hash fragments so far: 
			<h:outputText id="hashFragments" value="#{of:joinCollection(commandScriptBean.hashFragments, ', ')}" />
		</p>
		<h:form>
			<o:commandScript name="addHashFragment" execute="@form" action="#{commandScriptBean.addHashFragment}" 
				render=":hashFragments" oncomplete="alert('Hash fragment ' + location.hash + ' added!')"/>
		</h:form>
		<h:outputScript target="body">
			window.onhashchange = function() {
				addHashFragment({ hashFragment: location.hash });
			}
		</h:outputScript>
		
		<hr />
		
		<h3>Poll every second</h3>
		<p>It is now <h:outputText id="timestamp" value="#{now}" /></p>
		<h:form>
			<o:commandScript name="updateTimestamp" render=":timestamp" />
			<input type="button" value="Start poll" onclick="if (!window.poll) poll = setInterval(updateTimestamp, 1000)" />
			<input type="button" value="Stop poll" onclick="if (window.poll) { clearInterval(poll); poll = null; }" />
		</h:form>
		<p><i>
			Note: the progress indicator on the mouse cursor isn't JSF default, it's 
			<a href="#{request.contextPath}/resources/showcase/js/onload.js">specific</a>
			to this showcase application.
			So, if you actually didn't want to show one for polls in your application, you're by default already set.
		</i></p>
		
		<hr />
		
		<h3>Lazy loading</h3>
		<p>With <code>autorun="true"</code> you can defer loading and rendering to window onload event.</p>
		<h:panelGroup id="lazyDataPanel">
			<ui:fragment rendered="#{not empty commandScriptBean.exampleEntities}">
				<h:dataTable value="#{commandScriptBean.exampleEntities}" var="exampleEntity">
					<h:column>#{exampleEntity.id}</h:column>
					<h:column>#{exampleEntity.value}</h:column>
				</h:dataTable>
			</ui:fragment>
		</h:panelGroup>
		<h:form>
			<o:commandScript name="loadLazyData" action="#{commandScriptBean.loadLazyData}" render=":lazyDataPanel" autorun="true" />
		</h:form>
		<p><i>
			Note: in case you missed it, just refresh the page to see it once again.
		</i></p>
	</ui:define>
</ui:composition>